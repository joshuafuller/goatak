// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v5.29.3
// source: takmessage.proto

package cotproto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Top level message sent for TAK Messaging Protocol Version 1.
type TakMessage struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Optional - if omitted, continue using last reported control
	// information
	TakControl *TakControl `protobuf:"bytes,1,opt,name=takControl,proto3" json:"takControl,omitempty"`
	// Optional - if omitted, no event data in this message
	CotEvent       *CotEvent `protobuf:"bytes,2,opt,name=cotEvent,proto3" json:"cotEvent,omitempty"`
	SubmissionTime uint64    `protobuf:"varint,3,opt,name=submissionTime,proto3" json:"submissionTime,omitempty"`
	CreationTime   uint64    `protobuf:"varint,4,opt,name=creationTime,proto3" json:"creationTime,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *TakMessage) Reset() {
	*x = TakMessage{}
	mi := &file_takmessage_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TakMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TakMessage) ProtoMessage() {}

func (x *TakMessage) ProtoReflect() protoreflect.Message {
	mi := &file_takmessage_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TakMessage.ProtoReflect.Descriptor instead.
func (*TakMessage) Descriptor() ([]byte, []int) {
	return file_takmessage_proto_rawDescGZIP(), []int{0}
}

func (x *TakMessage) GetTakControl() *TakControl {
	if x != nil {
		return x.TakControl
	}
	return nil
}

func (x *TakMessage) GetCotEvent() *CotEvent {
	if x != nil {
		return x.CotEvent
	}
	return nil
}

func (x *TakMessage) GetSubmissionTime() uint64 {
	if x != nil {
		return x.SubmissionTime
	}
	return 0
}

func (x *TakMessage) GetCreationTime() uint64 {
	if x != nil {
		return x.CreationTime
	}
	return 0
}

var File_takmessage_proto protoreflect.FileDescriptor

const file_takmessage_proto_rawDesc = "" +
	"\n" +
	"\x10takmessage.proto\x12\x0fgoatak.cotproto\x1a\x0ecotevent.proto\x1a\x10takcontrol.proto\"\xcc\x01\n" +
	"\n" +
	"TakMessage\x12;\n" +
	"\n" +
	"takControl\x18\x01 \x01(\v2\x1b.goatak.cotproto.TakControlR\n" +
	"takControl\x125\n" +
	"\bcotEvent\x18\x02 \x01(\v2\x19.goatak.cotproto.CotEventR\bcotEvent\x12&\n" +
	"\x0esubmissionTime\x18\x03 \x01(\x04R\x0esubmissionTime\x12\"\n" +
	"\fcreationTime\x18\x04 \x01(\x04R\fcreationTimeB&H\x03Z\"github.com/kdudkov/goatak/cotprotob\x06proto3"

var (
	file_takmessage_proto_rawDescOnce sync.Once
	file_takmessage_proto_rawDescData []byte
)

func file_takmessage_proto_rawDescGZIP() []byte {
	file_takmessage_proto_rawDescOnce.Do(func() {
		file_takmessage_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_takmessage_proto_rawDesc), len(file_takmessage_proto_rawDesc)))
	})
	return file_takmessage_proto_rawDescData
}

var file_takmessage_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_takmessage_proto_goTypes = []any{
	(*TakMessage)(nil), // 0: goatak.cotproto.TakMessage
	(*TakControl)(nil), // 1: goatak.cotproto.TakControl
	(*CotEvent)(nil),   // 2: goatak.cotproto.CotEvent
}
var file_takmessage_proto_depIdxs = []int32{
	1, // 0: goatak.cotproto.TakMessage.takControl:type_name -> goatak.cotproto.TakControl
	2, // 1: goatak.cotproto.TakMessage.cotEvent:type_name -> goatak.cotproto.CotEvent
	2, // [2:2] is the sub-list for method output_type
	2, // [2:2] is the sub-list for method input_type
	2, // [2:2] is the sub-list for extension type_name
	2, // [2:2] is the sub-list for extension extendee
	0, // [0:2] is the sub-list for field type_name
}

func init() { file_takmessage_proto_init() }
func file_takmessage_proto_init() {
	if File_takmessage_proto != nil {
		return
	}
	file_cotevent_proto_init()
	file_takcontrol_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_takmessage_proto_rawDesc), len(file_takmessage_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_takmessage_proto_goTypes,
		DependencyIndexes: file_takmessage_proto_depIdxs,
		MessageInfos:      file_takmessage_proto_msgTypes,
	}.Build()
	File_takmessage_proto = out.File
	file_takmessage_proto_goTypes = nil
	file_takmessage_proto_depIdxs = nil
}
